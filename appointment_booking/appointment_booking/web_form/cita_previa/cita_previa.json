{
 "accept_payment": 0,
 "allow_comments": 0,
 "allow_delete": 0,
 "allow_edit": 0,
 "allow_incomplete": 0,
 "allow_multiple": 0,
 "allow_print": 0,
 "amount": 0.0,
 "amount_based_on_field": 0,
 "client_script": "var sw = 0;\ndocument.getElementsByClassName(\"btn-form-submit\")[0].innerText=\"Reservar Cita\"; \ndocument.getElementsByClassName(\"btn-form-submit\")[1].innerText=\"Reservar Cita\"; \nfrappe.web_form.on('appointment_date', (field, value) => {\n  // Check whether date is past \n  let sToday = moment(value,\"YY-MM-DD\") - moment(frappe.datetime.get_today(),\"YY-MM-DD\");\n  let appointment_date = new Date(value);\n  let appointment_type = $('input[data-fieldname=\"appointment_type\"]').val();\n  let department =  $('input[data-fieldname=\"department\"]').val();\n  let practitioner = $('input[data-fieldname=\"practitioner\"]').val();\n\n  if (sToday<0) {\n    frappe.msgprint({\n      title: __('Notificacion'),\n      indicator: 'red',\n      message: __('La fecha debe ser actual o futura y el Tipo de Cita, el Departamento y la Persona a Visitar son obligatorios')\n    });\n    frappe.web_form.set_value(\"appointment_date\", null);\n    return(false);\n  }\n  if (sToday >=0 && (!appointment_type || !department || !practitioner)) {\n    frappe.msgprint({\n      title: __('Notificacion'),\n      indicator: 'red',\n      message: __('El Tipo de Cita, el Departamento y la Persona a visitar son obligatorios')\n    });\n    frappe.web_form.set_value(\"appointment_date\", null);\n    return(false);\n  }\n  \nif (sToday >=0 && appointment_type && department && practitioner) {\n  const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n  // Modal Dialog searching available time slots for data\n  var d = new frappe.ui.Dialog({\n    title: __(\"Reservar hora de cita el \" + appointment_date.toLocaleDateString('es-ES', options) + '?'),\n    fields: [\n      { fieldtype: 'HTML', fieldname: 'available_slots'}\n    ],\n    primary_action_label: __(\"Fijar Seleccion\"),\n    primary_action: function() {\n      frappe.web_form.set_value('appointment_time', selected_slot);\n      sw = 0;\n      d.hide();\n      d.get_primary_btn().attr('disabled', true);\n    },\n    secondary_action_label: __(\"Cerrar\"),\n    secondary_action: function() {\n      sw = 0;\n      d.refresh();\n    }\n  });\n\n  d.set_values({\n    'available_slots': show_slots(d)\n  });\n\n  // disable dialog action initially\n  d.get_primary_btn().attr('disabled', true);\n  if (sw === 0 ) { sw=1; d.show();}\n\n  function show_slots(d,fd) {\n    var fd = d.fields_dict;   \n    if (value && practitioner){\n      fd.available_slots.html(\"\");\n      frappe.call({\n        method: 'appointment_booking.appointment_booking.doctype.visitor_appointment.visitor_appointment.get_availability_data',\n        args: {\n\t  practitioner: practitioner,\n\t  date: value,\n\t  department: department\n        },\n        callback: (r) => {\n          var data = r.message;\n\t  if(data.slot_details.length > 0) {\n\t    var $wrapper = d.fields_dict.available_slots.$wrapper;\n  \t    // make buttons for each slot\n\t    var slot_details = data.slot_details;\n\t    var slot_html = \"\";\n\t    for (let i = 0; i < slot_details.length; i++) {\n\t      slot_html = slot_html + `<label>${slot_details[i].slot_name}</label>`;\n\t      slot_html = slot_html + `<br/>` + slot_details[i].available_slots.map(slot => {\n\t        let disabled = '';\n\t        let start_str = slot.from_time;\n\t        let slot_start_time = moment(slot.from_time, 'HH:mm:ss');\n\t        let slot_to_time = moment(slot.to_time, 'HH:mm:ss');\n\t        let interval = (slot_to_time - slot_start_time)/60000 | 0;\n\t        // iterate in all booked appointments, update the start time and duration\n\t        slot_details[i].appointments.forEach(function(booked) {\n\t\t  let booked_moment = moment(booked.appointment_time, 'HH:mm:ss');\n\t\t  let end_time = booked_moment.clone().add(booked.duration, 'minutes');\n\t\t  // Deal with 0 duration appointments\n\t\t  if(booked_moment.isSame(slot_start_time) || booked_moment.isBetween(slot_start_time, slot_to_time)){\n\t\t    if(booked.duration == 0){\n\t\t      disabled = 'disabled=\"disabled\"';\n\t\t      return false;\n\t\t    }\n\t\t  }\n\t\t  // Check for overlaps considering appointment duration\n\t\t  if(slot_start_time.isBefore(end_time) && slot_to_time.isAfter(booked_moment)){\n\t\t    // There is an overlap\n\t\t    disabled = 'disabled=\"disabled\"';\n  \t\t    return false;\n\t\t  }\n\t        });\n\t        return `<button class=\"btn btn-default\"\n\t\t  data-name=${start_str}\n\t\t  data-duration=${interval}\n\t\t  style=\"margin: 0 10px 10px 0; width: 72px;\" ${disabled}>\n\t\t  ${start_str.substring(0, start_str.length - 3)}\n\t        </button>`;\n\t      }).join(\"\");\n\t      slot_html = slot_html + `<br/>`;\n\t    }\n  \t    $wrapper\n\t    .css('margin-bottom', 0)\n\t    .addClass('text-center')\n\t    .html(slot_html);\n  \t    // blue button when clicked\n\t    $wrapper.on('click', 'button', function() {\n\t      var $btn = $(this);\n\t      $wrapper.find('button').removeClass('btn-primary');\n\t      $btn.addClass('btn-primary');\n\t      selected_slot = $btn.attr('data-name');\n\t      duration = $btn.attr('data-duration');\n  \t      // enable dialog action\n\t      d.get_primary_btn().attr('disabled', null);\n\t    });\n  \t  }else {\n\t    fd.available_slots.html(\"Elige una fecha valida\".bold())\n\t  }\n        },\n        freeze: true,\n        freeze_message: __(\"Fetching records......\"),\n        always: (e) => {\n           if (e.exc_type === \"ValidationError\") { \n             sw=1;\n             d.hide();\n             frappe.web_form.set_value('appointment_date', null);\n           }\n        }\n      })\n      .fail(fail => console.log(\"failure\", fail))\n      .done(success => console.log(\"success\", success.message));\n//;\n    }else{\n      fd.available_slots.html(\"El Departamento, la Persona a Visitar y la Fecha son obligatorios\".bold());\n    }\n  }\n}\n});\n// Check appointment-type to set duration\nfrappe.web_form.on('appointment_type', (field, value) => {\n  let appointment_type = value // $('input[data-fieldname=\"appointment_type\"]').val();\n  frappe.web_form.set_value('department', null);\n  frappe.web_form.set_value('practitioner', null);\n  if ($('input[data-fieldname=\"appointment_date\"]').val() != \"\") {\n    frappe.web_form.set_value('appointment_date', null);\n    frappe.web_form.set_value('appointment_time', null);\n  }\n  frappe.call({\n    method: 'appointment_booking.appointment_booking.doctype.visitor_appointment.visitor_appointment.get_duration',\n    args: {\n      appointment_type: appointment_type\n    }, \n    callback: (r) => {\n      var data = r.message;\n      frappe.web_form.set_value(\"duration\",data);; \n    }\n  });\n});\n// Check email validity\nfrappe.web_form.on('visitor', (field, value) => {\n  let visitor = value //$('input[data-fieldname=\"appointment_type\"]').val();\n  if (!validate_email(visitor)) {\n    frappe.msgprint({\n      title: __('Notificacion'),\n      indicator: 'red',\n      message: __(\"No has introducido un correo valido\")\n    });\n    frappe.web_form.set_value(\"visitor\",null);\n  }\n});\n// Check if department filled before select practitioner\nfrappe.web_form.on('practitioner', (field, value) => {\n  let department = $('input[data-fieldname=\"department\"]').val();\n  let appointment_type = $('input[data-fieldname=\"appointment_type\"]').val();\n  if (!department || !appointment_type) {\n    frappe.msgprint({\n      title: __('Notificacion'),\n      indicator: 'red',\n      message: __(\"Primero debes elegir el Tipo de Cita y el Departamento\")\n    });\n    frappe.web_form.set_value(\"practitioner\",null);\n    return(false);\n  }\n});\n// Fill department based on appointment_type\nfrappe.web_form.on('appointment_type', (field, value) => {\n  filterDepartment(value);\n});\nfunction filterDepartment(value) {\n$.ajax({\n  url: 'api/resource/Appointment Type?fields=[\"*\"]&filters=[[\"Appointment Type\",\"name\",\"=\",\"' + value + '\"]]',\n  success: function(result) {\n        var options = [];\n        for (var i = 0; i < result.data.length; i++) {\n          options.push({\n            'label': result.data[i].department,\n            'value': result.data[i].department\n          });\n\t\t  var dpto = result.data[i].department \n        };\n        var field = frappe.web_form.get_field('department');\n        field._data = options;\n        field.refresh();\n        if(i<=1) {\n          frappe.web_form.set_value(\"department\",dpto);\n          filterPractitioner(dpto);\n        }\n      }\n    });\n};\n\n// Fill practitioner based on department\nfrappe.web_form.on('department', (field, value) => {\n  let appointment_type = $('input[data-fieldname=\"appointment_type\"]').val();\n  if ( !appointment_type ) {\n    frappe.msgprint({\n     title: __('Notificacion'),\n      indicator: 'red',\n      message: __(\"Se debe elegir primero el tipo de Cita\")\n    });\n    frappe.web_form.set_value(\"department\", null);\n    return(false);\n  }\n  filterPractitioner(value);\n});\nfunction filterPractitioner(value) {\n    var options = [];\n    $.ajax({\n      url: 'api/resource/Service Practitioner?filters=[[\"Service Practitioner\",\"department\",\"=\",\"Varios\"]]',\n      success: function(result) {\n        for (var j = 0; j < result.data.length; j++) {\n\t  var n = j\n          frappe.call({\n            method: 'appointment_booking.appointment_booking.doctype.visitor_appointment.visitor_appointment.get_department',\n            args: {\n              practitioner: result.data[j].name\n            }, \n            callback: (e) => {\n              var dpt = e.message;\n\t      if (dpt.includes(value)) {\n\t\t  options.push({\n                    'label': result.data[n].name,\n                    'value': result.data[n].name\n                });\n              }\n            }\n          });\n        };\n      }\n    }); \n    $.ajax({\n      url: 'api/resource/Service Practitioner?filters=[[\"Service Practitioner\",\"department\",\"=\",\"' + value + '\"]]',\n      success: function(result) {\n        for (var i = 0; i < result.data.length; i++) {\n          options.push({\n            'label': result.data[i].name,\n            'value': result.data[i].name\n          });\n        };\n      }\n    });  \n    var field = frappe.web_form.get_field('practitioner');\n    field._data = options;\n    field.refresh();\n    //console.log(options);\n  };",
 "creation": "2020-08-19 18:47:29.715851",
 "doc_type": "Visitor Appointment",
 "docstatus": 0,
 "doctype": "Web Form",
 "idx": 0,
 "introduction_text": "<!-- ======= Header ======= -->\n<header class=\"fixed-top \" id=\"header\" style=\"background: lightgrey;\">\n  <div class=\"container d-flex align-items-center\">\n    <!-- <h1 class=\"logo mr-auto\"><a href=\"index.html\">Tempo</a></h1> -->\n    <!-- Uncomment below if you prefer to use an image logo -->\n    <a class=\"logo mr-auto\" href=\"beauty_es\"><img alt=\"\" class=\"img-fluid\" src=\"assets/Tempo/assets/img/logo.png\"></a>\n    <nav class=\"nav-menu d-none d-lg-block\">\n      <ul>\n        <li class=\"get-started\"><a><i class=\"bx bx-phone\"></i>680 756 089</a></li>\n        <li><a href=\"beauty_es#services\">Servicios</a></li>\n        <li><a href=\"beauty_es#portfolio\">Productos</a></li>\n        <li><a href=\"beauty_es#team\">Equipo</a></li>\n        <li><a href=\"contact\">Contacto</a></li>\n\t\t<li class=\"get-started\"><a href=\"appointment\" style=\"color: white;\">Pedir Cita</a></li>\n\t\t<li class=\"drop-down\"><a>Idiomas</a>\n          <ul>\n            <li><a href=\"beauty_es\">Espa\u00f1ol</a></li>\n            <li><a href=\"beauty_en\">English</a></li>\n\t\t\t<li><a href=\"beauty_fr\">Fran\u00e7ais</a></li>\n\t\t\t<li><a href=\"beauty_de\">Deutsch</a></li>\n\t\t\t<li><a href=\"beauty_cat\">Catal\u00e1</a></li>\n\t\t\t<li><a href=\"beauty_eus\">Euskera</a></li>\n\t\t\t<li><a href=\"beauty_gal\">Galego</a></li>\n          </ul>\n        </li>\n      </ul>\n    </nav><!-- .nav-menu -->\n    \n    \n  </div>\n</header><!-- End Header -->\n<div class=\"section-title\">\n  <h3>Tu mejor selecci\u00f3n</h3>\n</div> ",
 "is_standard": 1,
 "login_required": 0,
 "max_attachment_size": 0,
 "modified": "2020-08-24 18:29:02.431891",
 "modified_by": "Administrator",
 "module": "Appointment Booking",
 "name": "cita-previa",
 "owner": "Administrator",
 "payment_button_label": "Buy Now",
 "published": 1,
 "route": "appointment",
 "show_in_grid": 0,
 "show_sidebar": 0,
 "sidebar_items": [],
 "success_message": "Has realizado con \u00e9xito tu cita. Recibir\u00e1s un correo con la confirmaci\u00f3n a la mayor brevedad.",
 "success_url": "/beauty_es",
 "title": "Cita Previa",
 "web_form_fields": [
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "section_break_1",
   "fieldtype": "Section Break",
   "hidden": 0,
   "label": "Detalles de la Reserva",
   "max_length": 0,
   "max_value": 0,
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "appointment_type",
   "fieldtype": "Link",
   "hidden": 0,
   "label": "Tipo de Cita",
   "max_length": 0,
   "max_value": 0,
   "options": "Appointment Type",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "default": "30",
   "description": "En minutos",
   "fieldname": "duration",
   "fieldtype": "Int",
   "hidden": 0,
   "label": "Duraci\u00f3n",
   "max_length": 0,
   "max_value": 0,
   "read_only": 1,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "column_break_1",
   "fieldtype": "Column Break",
   "hidden": 0,
   "max_length": 0,
   "max_value": 0,
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "department",
   "fieldtype": "Link",
   "hidden": 0,
   "label": "Departamento",
   "max_length": 0,
   "max_value": 0,
   "options": "Service Department",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "practitioner",
   "fieldtype": "Link",
   "hidden": 0,
   "label": "Practitioner",
   "max_length": 0,
   "max_value": 0,
   "options": "Service Practitioner",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "column_break_2",
   "fieldtype": "Column Break",
   "hidden": 0,
   "max_length": 0,
   "max_value": 0,
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "appointment_date",
   "fieldtype": "Date",
   "hidden": 0,
   "label": "Fecha de Cita",
   "max_length": 0,
   "max_value": 0,
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "depends_on": "appointment_date",
   "fieldname": "appointment_time",
   "fieldtype": "Time",
   "hidden": 0,
   "label": "Hora de Cita",
   "max_length": 0,
   "max_value": 0,
   "read_only": 1,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "section_break_2",
   "fieldtype": "Section Break",
   "hidden": 0,
   "label": "Detalles de Cliente",
   "max_length": 0,
   "max_value": 0,
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "visitor",
   "fieldtype": "Data",
   "hidden": 0,
   "label": "Email Cliente",
   "max_length": 0,
   "max_value": 0,
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "visitor_name",
   "fieldtype": "Data",
   "hidden": 0,
   "label": "Nombre Cliente",
   "max_length": 0,
   "max_value": 0,
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "visitor_phone",
   "fieldtype": "Data",
   "hidden": 0,
   "label": "Telefono Cliente",
   "max_length": 0,
   "max_value": 0,
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "default": "1",
   "description": "Si no quiere recibir recordatorio por correo electr\u00f3nico el d\u00eda anterior a la cita, desact\u00edve la casilla",
   "fieldname": "appointment_reminder",
   "fieldtype": "Check",
   "hidden": 0,
   "label": "Recordatorio Cita",
   "max_length": 0,
   "max_value": 0,
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "column_break_3",
   "fieldtype": "Column Break",
   "hidden": 0,
   "max_length": 0,
   "max_value": 0,
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "description": "En caso de representar o solicitar en nombre de alg\u00fan/o cliente/a, por favor referirlo en el cuadro de Detalles",
   "fieldname": "notes",
   "fieldtype": "Long Text",
   "hidden": 0,
   "label": "Notas",
   "max_length": 0,
   "max_value": 0,
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "column_break_4",
   "fieldtype": "Column Break",
   "hidden": 0,
   "max_length": 0,
   "max_value": 0,
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  }
 ]
}